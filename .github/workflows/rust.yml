name: Rust

on:
  push:
    branches: [ main ]
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config dh-autoreconf libglib2.0-dev bison liblzma-dev libext2fs-dev libgpgme-dev libfuse-dev
          git clone https://github.com/ostreedev/ostree.git
          cd ostree 
          git submodule update --init
          env NOCONFIGURE=1 ./autogen.sh
          ./configure --without-gpgme --prefix=/usr/
          make -j 20
          sudo make install
          cd ..
          rm -rf ostree
    
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - run: cargo fmt -- --check

  clippy:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: clippy
      - run: cargo clippy -- -D warnings

  build-rust:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install stable toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - uses: Swatinem/rust-cache@v1
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose

  create-bitbake:
    needs: prepare
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v2
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: create-bitbake
        run: |
          cargo install cargo-bitbake --locked
          cargo bitbake
          mv fmu_rs_0.1.0.bb fmu-rs_0.1.0.bb
      - name: Archive code coverage results
        uses: actions/upload-artifact@v2.2.4
        with:
          name: bitbake file
          path: fmu-rs_0.1.0.bb
      - name: Checkout meta-fmu
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          repository: avrabe/meta-fmu
          path: meta-fmu
      - name: copy and commit the recipe
        run:  |
          sed -ie "s/PV_append/PV:append/" fmu-rs_0.1.0.bb
          cp fmu-rs_0.1.0.bb meta-fmu/recipes-application/fmu/
          cd meta-fmu
          git config user.name 'fmubot'
          git config user.email 'fmubot@users.noreply.github.com'
          git add -A
          git commit -m "Add new revision"
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
           token:  ${{ secrets.PUSH_TOKEN }}
           delete-branch: true
           path: meta-fmu

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
  codecov-check:
    needs: prepare
    name: codecov-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: install grcov
        run: |
          curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-linux-x86_64.tar.bz2 | tar jxf -
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          version: '0.15.0'
          args: '-- --test-threads 1'
  
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v2.1.0
        with:
          token: ${{secrets.CODECOV_TOKEN}}
  
      - name: Archive code coverage results
        uses: actions/upload-artifact@v2.2.4
        with:
          name: code-coverage-report
          path: cobertura.xml
